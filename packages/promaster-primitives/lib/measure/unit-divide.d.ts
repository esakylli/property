import * as Unit from './unit';
import * as q from "./quantity";
export declare function volumeByDuration(left: Unit.Unit<q.Volume>, right: Unit.Unit<q.Duration>): Unit.Unit<q.VolumeFlow>;
export declare function lengthByDuration(left: Unit.Unit<q.Length>, right: Unit.Unit<q.Duration>): Unit.Unit<q.Velocity>;
export declare function velocityBySecond(left: Unit.Unit<q.Velocity>, right: Unit.Unit<q.Duration>): Unit.Unit<q.Acceleration>;
export declare function amountOfSubstanceByDuration(left: Unit.Unit<q.AmountOfSubstance>, right: Unit.Unit<q.Duration>): Unit.Unit<q.CatalyticActivity>;
export declare function massByVolume(left: Unit.Unit<q.Mass>, right: Unit.Unit<q.Volume>): Unit.Unit<q.Density>;
export declare function electricChargeByElectricPotential(left: Unit.Unit<q.ElectricCharge>, right: Unit.Unit<q.ElectricPotential>): Unit.Unit<q.ElectricCapacitance>;
export declare function energyByDuration(left: Unit.Unit<q.Energy>, right: Unit.Unit<q.Duration>): Unit.Unit<q.Power>;
export declare function powerByElectricalCurrent(left: Unit.Unit<q.Power>, right: Unit.Unit<q.ElectricCurrent>): Unit.Unit<q.ElectricPotential>;
export declare function electricalCurrentByElectricalPotential(left: Unit.Unit<q.ElectricCurrent>, right: Unit.Unit<q.ElectricPotential>): Unit.Unit<q.ElectricConductance>;
export declare function magneticFluxByElectricalCurrent(left: Unit.Unit<q.MagneticFlux>, right: Unit.Unit<q.ElectricCurrent>): Unit.Unit<q.ElectricInductance>;
export declare function electricalPotentialByElectricalCurrent(left: Unit.Unit<q.ElectricPotential>, right: Unit.Unit<q.ElectricCurrent>): Unit.Unit<q.ElectricResistance>;
export declare function dimentionlessByDuration(left: Unit.Unit<q.Dimensionless>, right: Unit.Unit<q.Duration>): Unit.Unit<q.Frequency>;
export declare function luminousFluxByArea(left: Unit.Unit<q.LuminousFlux>, right: Unit.Unit<q.Area>): Unit.Unit<q.Illuminance>;
export declare function magneticFluxByArea(left: Unit.Unit<q.MagneticFlux>, right: Unit.Unit<q.Area>): Unit.Unit<q.MagneticFluxDensity>;
export declare function massByDuration(left: Unit.Unit<q.Mass>, right: Unit.Unit<q.Duration>): Unit.Unit<q.MassFlow>;
export declare function forceByArea(left: Unit.Unit<q.Force>, right: Unit.Unit<q.Area>): Unit.Unit<q.Pressure>;
export declare function energyByMass(left: Unit.Unit<q.Energy>, right: Unit.Unit<q.Mass>): Unit.Unit<q.SpecificEnthalpy>;
export declare function powerByVolumeFlow(left: Unit.Unit<q.Power>, right: Unit.Unit<q.VolumeFlow>): Unit.Unit<q.SpecificFanPower>;
export declare function powerByTemperature(left: Unit.Unit<q.Power>, right: Unit.Unit<q.Temperature>): Unit.Unit<q.HeatCapacityRate>;
export declare function massByMass(left: Unit.Unit<q.Mass>, right: Unit.Unit<q.Mass>): Unit.Unit<q.HumidityRatio>;
export declare function dimensionlessByVolume(left: Unit.Unit<q.Dimensionless>, right: Unit.Unit<q.Volume>): Unit.Unit<q.DimensionlessPerVolume>;
export declare function dimensionlessByEnergy(left: Unit.Unit<q.Dimensionless>, right: Unit.Unit<q.Energy>): Unit.Unit<q.DimensionlessPerEnergy>;
export declare function dimensionlessByDuration(left: Unit.Unit<q.Dimensionless>, right: Unit.Unit<q.Duration>): Unit.Unit<q.DimensionlessPerDuration>;
export declare function powerByArea(left: Unit.Unit<q.Power>, right: Unit.Unit<q.Area>): Unit.Unit<q.Intensity>;
export declare function volumeByEnergy(left: Unit.Unit<q.Volume>, right: Unit.Unit<q.Energy>): Unit.Unit<q.WaterUseEfficiency>;
export declare function massByEnergy(left: Unit.Unit<q.Mass>, right: Unit.Unit<q.Energy>): Unit.Unit<q.Emission>;
export declare function massFlowByArea(left: Unit.Unit<q.MassFlow>, right: Unit.Unit<q.Area>): Unit.Unit<q.MassFlowPerArea>;
export declare function energyByVolume(left: Unit.Unit<q.Energy>, right: Unit.Unit<q.Volume>): Unit.Unit<q.HeatingValue>;
export declare function volumeFlowByPower(left: Unit.Unit<q.VolumeFlow>, right: Unit.Unit<q.Power>): Unit.Unit<q.VolumeFlowPerPower>;
export declare function volumeFlowByArea(left: Unit.Unit<q.VolumeFlow>, right: Unit.Unit<q.Area>): Unit.Unit<q.VolumeFlowPerArea>;
export declare function dimensionlessByMass(left: Unit.Unit<q.Dimensionless>, right: Unit.Unit<q.Mass>): Unit.Unit<q.DimensionlessPerMass>;
