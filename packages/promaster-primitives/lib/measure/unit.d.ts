import { Quantity } from "./quantity";
import * as UnitConverter from "./unit_converters/unit_converter";
import { Element } from "./units/element";
import * as TransformedUnit from "./units/transformed_unit";
import * as ProductUnit from "./units/product_unit";
import * as AlternateUnit from "./units/alternate_unit";
import * as BaseUnit from "./units/base_unit";
export interface Unit<T extends Quantity> {
    readonly quantity: Quantity;
    readonly elements: Array<Element>;
    readonly innerUnit: InnerUnit<T>;
}
export declare type InnerUnit<T extends Quantity> = AlternateUnit.AlternateUnit<T> | BaseUnit.BaseUnit<T> | ProductUnit.ProductUnit<T> | TransformedUnit.TransformedUnit<T>;
export declare function create<T extends Quantity>(quantity: T, elements: Array<Element>, innerUnit: InnerUnit<T>): Unit<T>;
export declare function getLabel<T extends Quantity>(unit: Unit<T>): string;
export declare function times<T extends Quantity>(quantity: T, u: Unit<any>): Unit<T>;
export declare function divide<T extends Quantity>(quantity: T, u: Unit<any>): Unit<T>;
export declare function getStandardUnit<T extends Quantity>(unit: Unit<T>): Unit<any>;
export declare function toStandardUnit<T extends Quantity>(unit: Unit<T>): UnitConverter.UnitConverter;
export declare function isStandardUnit<T extends Quantity>(unit: Unit<T>): boolean;
export declare function getConverterTo<T extends Quantity>(that: Unit<any>, unit: Unit<T>): UnitConverter.UnitConverter;
export declare function getElements<T extends Quantity>(unit: Unit<T>): Array<Element>;
export declare function toString<T extends Quantity>(unit: Unit<T>): string;
export declare function getQuantityType<T extends Quantity>(unit: Unit<T>): Quantity;
export declare function getName<T extends Quantity>(unit: Unit<T>): string;
export declare function buildDerivedName<T extends Quantity>(unit: Unit<T>): string;
export declare function withLabel<T extends Quantity>(label: string, unit: Unit<T>): Unit<T>;
export declare function transform<T extends Quantity>(operation: UnitConverter.UnitConverter, unit: Unit<T>): Unit<T>;
export declare function timesNumber<T extends Quantity>(factor: number, unit: Unit<T>): Unit<T>;
export declare function divideNumber<T extends Quantity>(factor: number, unit: Unit<T>): Unit<T>;
export declare function plus<T extends Quantity>(offset: number, unit: Unit<T>): Unit<T>;
export declare function minus<T extends Quantity>(offset: number, unit: Unit<T>): Unit<T>;
