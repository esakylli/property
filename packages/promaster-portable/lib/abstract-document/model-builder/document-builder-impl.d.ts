import { Guid, AbstractDoc } from "../model/abstract-doc";
import { NumberingDefinition } from "../model/numberings/numbering-definition";
import { Numbering } from "../model/numberings/numbering";
import { Style } from "../model/styles/style";
import { MasterPage } from "../model/page/master-page";
import { TableBuilder } from "./table-builder";
import { AbstractImage } from "../../abstract-image/abstract-image";
import { TableCellBuilder } from "./table-cell-builder";
import { ParagraphBuilder } from "./paragraph-builder";
import { TextProperties } from "../model/properties/text-properties";
import { FieldType } from "../model/enums/field-type";
export declare class DocumentBuilder implements DocumentBuilder {
    private readonly _sections;
    private readonly _imageResources;
    private readonly _styles;
    private readonly _numberings;
    private readonly _numberingDefinitions;
    private readonly _stack;
    constructor();
    build(): AbstractDoc;
    setStyleName(name: string, style: Style): void;
    addImageResource(id: Guid, abstractImage: AbstractImage, renderScale: number): void;
    setNumbering(numberingId: string, numbering: Numbering): void;
    setNumberingDefinition(numberingDefinitionId: string, definition: NumberingDefinition): void;
    beginSection(page: MasterPage): void;
    endSection(): void;
    beginTable(columns: number[], keepTogether: boolean): TableBuilder;
    endTable(): void;
    beginTableRow(height: number): void;
    endTableRow(): void;
    beginTableCell(columnSpan: number): TableCellBuilder;
    endTableCell(): void;
    beginKeepTogether(): void;
    endKeepTogether(): void;
    beginParagraph(): ParagraphBuilder;
    beginParagraph2(styleBasedOn: string): ParagraphBuilder;
    endParagraph(): void;
    insertImage(imageResourceId: Guid, width: number, height: number): void;
    insertImageWithResource(imageResourceId: Guid, abstractImage: AbstractImage, width: number, height: number, renderScale?: number): void;
    insertTextRun(text: string): void;
    insertTextRun2(text: string, textProperties: TextProperties): void;
    insertTextRun3(text: string, styleName: string): void;
    insertField(type: FieldType, textProperties: TextProperties): void;
    insertField2(type: FieldType, styleName: string): void;
    private peek<T>(builderType, builtType);
    private pop<T>(builderType, builtType);
    private AddDefaultStyles();
    private addStandardStyles();
    private addTextAndParagraphStyle(styleName, bold, fontSize, alignment?);
    private addStyle<TStyle>(name, style);
}
